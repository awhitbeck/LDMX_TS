This file includes all the important files for training the BDT from the nfs server
and then calculating BDT values locally Here is a brief list of each file, containing what they do. This will be the barebones of what was needed to create the BDT,
so previous versions of each of the files are available if needed (likely not). Just ask me if you want them.

BDTMakeAndCut2.C

This file takes OneAll,TwoAll,ThreeAll.root files from the nfs server. These are files drawn from the nfs server with no separation into good and bad tracks, but just
flattened to only include those thing required by the BDT. With these files it trains the BDT and includes the training information in a root file called "TMVA{something}.root". This file will contain all relevant BDT responce curves and the like. Importantly in the directory it was run it will create a file called "dataset" which contains the BDT weighting information used for BDTMakeAndCutNoRead.C

BDTMakeAndCutNoRead.C

This file takes the weighting information generated in "dataset" from BDTMakeAndCut.C and runs them on OneAll,TwoAll,ThreeAll.root files from the nfs server. 
These are files drawn from the nfs server with no separation into good and bad tracks, but just flattened to only include those thing required by the BDT. 
It will generate the same files w/ same information but now to each track it will associate a BDT value. For my results I generated confusion matrices by looking
at select.numTra from these files before and after a BDT cut. Furthermore another cool metric is plotting select.numTra:select.BDTval, which generates for TwoVal a 
moving column of the confusion matrix with BDT and is easy visual info that the BDT is identifying the appropriatte features. Btw you can probably jerry rig other files 
to create confusion matrices from LDMX_TS, but I just read the information off of the Histograms I mentioned

BDTValueDiscern.C

The TMVA files generated by BDTMakeAndCut2.C have an ROC curve which tells you what efficiencies you can expect for certain removal of bad tracks. It doesn't, however, 
tell you what BDT values you need to achieve these values. This .C file can be used to explore BDT values and actually find the points on the ROC from TMVA files in 
BDTMakeAndCut2.C

namelist,namelist1and3.txt,namelist2, etc.

All of these namelist txt files simply contain the list of names of the nfs servers' one million events. These names are used by the readN.C, readPurpose.C files (etc) 
to recursively go through each of the 100 100,000 event files and generate from them either training data for the BDT or files to test the BDT on

readPurpose4.C

This file takes nfs sample data whose names are fed into it from the namelist and creates large signal and brackground files from them. Its not too complicated what it
does with them: it just from the TTrees of the nfs data draws residual, numTra, uCl,dCl, etc and adds them to a bare bones root file. What entries it decides to put in
signal and background you should be able to see by the big and immediattely sequential if statments for the signal and background. The background (good tracks) only accepts
events which have beamEfrac 1 (which the file also finds), and you can set the acceptance value of the bad tracks (currently set to less than beamEfrac of .5). This will
normally need to be run ON THE NFS SERVER, NOT LOCALLY.

readPurpose2.C

This file takes nfs sample data whose names are fed into it same as readPurpose4.C. The only thing thats different is that it does not separate the data to train it: it
produces the files we test the BDT upon. In this manner readPurpose4 normally only uses namelist1and3.txt, while this can use any of them. It will generate a root file called 
"allOfThem.root" on the NFS server. MUST BE RUN ON THE NFS SERVER, NOT LOCALLY. Once you have "allOfThem.root", you can use BDTMakeAndCut2.C to test your BDT on allOfThem to 
get select.root (which is mentions in BDTMakeAndCut2) and all the the various performance metrics like confusion matrices. You will need to have generated TMVA data from 
readPurpose4.C and BDTMakeAndCutNoRead beforehand however.

2DCutEllipse.C

This file performs a 2D cut on residual AND Timing information. The relevant diagram was included in one of the presentations. It did not perform much better than just the 
one dimensional selection, and really it doesn't serve much of a purpose. It is just included in case a person finds the diagram of this selection and wants the code for it.

ROCcurves.C

This performs the simple 1 d cut included in the "overview presentation" and calculates the ROC curves. The arrays supplied in x[j],y[j] were just plotted using python 
in scratch grapher.py by putting the data into text files "scratch1-4.txt". These are included so the file will actually run

scratch1-4.txt

Look directly at the previous inclusion.
